// Code generated by MockGen. DO NOT EDIT.
// Source: ssh.go

// Package mock_ssh is a generated GoMock package.
package mock_ssh

import (
	gomock "github.com/golang/mock/gomock"
	go_ssh_client "github.com/metrue/go-ssh-client"
	reflect "reflect"
	time "time"
)

// MockClienter is a mock of Clienter interface
type MockClienter struct {
	ctrl     *gomock.Controller
	recorder *MockClienterMockRecorder
}

// MockClienterMockRecorder is the mock recorder for MockClienter
type MockClienterMockRecorder struct {
	mock *MockClienter
}

// NewMockClienter creates a new mock instance
func NewMockClienter(ctrl *gomock.Controller) *MockClienter {
	mock := &MockClienter{ctrl: ctrl}
	mock.recorder = &MockClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClienter) EXPECT() *MockClienterMockRecorder {
	return m.recorder
}

// WithServer mocks base method
func (m *MockClienter) WithServer(add string) go_ssh_client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithServer", add)
	ret0, _ := ret[0].(go_ssh_client.Client)
	return ret0
}

// WithServer indicates an expected call of WithServer
func (mr *MockClienterMockRecorder) WithServer(add interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithServer", reflect.TypeOf((*MockClienter)(nil).WithServer), add)
}

// WithUser mocks base method
func (m *MockClienter) WithUser(user string) go_ssh_client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUser", user)
	ret0, _ := ret[0].(go_ssh_client.Client)
	return ret0
}

// WithUser indicates an expected call of WithUser
func (mr *MockClienterMockRecorder) WithUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUser", reflect.TypeOf((*MockClienter)(nil).WithUser), user)
}

// WithPassword mocks base method
func (m *MockClienter) WithPassword(password string) go_ssh_client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPassword", password)
	ret0, _ := ret[0].(go_ssh_client.Client)
	return ret0
}

// WithPassword indicates an expected call of WithPassword
func (mr *MockClienterMockRecorder) WithPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPassword", reflect.TypeOf((*MockClienter)(nil).WithPassword), password)
}

// WithKey mocks base method
func (m *MockClienter) WithKey(key string) go_ssh_client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithKey", key)
	ret0, _ := ret[0].(go_ssh_client.Client)
	return ret0
}

// WithKey indicates an expected call of WithKey
func (mr *MockClienterMockRecorder) WithKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithKey", reflect.TypeOf((*MockClienter)(nil).WithKey), key)
}

// WithPort mocks base method
func (m *MockClienter) WithPort(port string) go_ssh_client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPort", port)
	ret0, _ := ret[0].(go_ssh_client.Client)
	return ret0
}

// WithPort indicates an expected call of WithPort
func (mr *MockClienterMockRecorder) WithPort(port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPort", reflect.TypeOf((*MockClienter)(nil).WithPort), port)
}

// Connectable mocks base method
func (m *MockClienter) Connectable(timeout time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connectable", timeout)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connectable indicates an expected call of Connectable
func (mr *MockClienterMockRecorder) Connectable(timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connectable", reflect.TypeOf((*MockClienter)(nil).Connectable), timeout)
}

// RunCommand mocks base method
func (m *MockClienter) RunCommand(command string, options go_ssh_client.CommandOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", command, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommand indicates an expected call of RunCommand
func (mr *MockClienterMockRecorder) RunCommand(command, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockClienter)(nil).RunCommand), command, options)
}
